import os
import importlib.util
import json
from flask import Flask, request, jsonify
from google.generativeai import GenerativeModel
import google.generativeai as genai
from google.genai.types import Content, Part
from extract_text_from_pdf import LAW_KNOWLEDGE
from flask import current_app as app
import traceback

# Google GenAI 클라이언트 초기화 (Gemini API 사용)
client = genai.configure(api_key="AIzaSyCgov8AsBzeI5VgOqT1jM-f7WfrsS1lg7g")

# 전역 client 객체
model = None
client = None

def ensure_client():
    global model, client
    if client is None:
        try:
            model = genai.GenerativeModel("gemini-1.5-pro")
            client = model.start_chat(history=[])
        except Exception as e:
            print("Gemini client 초기화 실패:", e)
            client = None

# Flask 앱 생성
app = Flask(__name__)

# 세션별 대화 저장소
conversations = {}

# 재판 단계별 발언 순서 정의
PHASE_SPEAK_ORDER = {
    "서론": ["판사", "검사", "변호사"],
    "증거 제출": ["판사", "검사", "변호사"],
    "증인 심문": ["판사", "검사", "변호사"],
    "최종변론": ["판사", "검사", "변호사"],
    "평결": ["판사"]
}

# 사건 정보를 저장할 전역 딕셔너리
CASE_DATABASE = {}

# /data 폴더에 있는 사건 정보를 담은 .py 파일들을 동적으로 불러옴
def load_cases_from_py():
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))
    data_dir = os.path.join(BASE_DIR, 'data')

    for filename in os.listdir(data_dir):
        if filename.endswith('.py'):
            file_path = os.path.join(data_dir, filename)
            module_name = filename[:-3]  # .py 제거
            spec = importlib.util.spec_from_file_location(module_name, file_path)
            module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(module)
            cases = getattr(module, 'cases', None)
            if cases:
                for case in cases:
                    case_name = case.get('caseName')
                    if case_name:
                        CASE_DATABASE[case_name] = case

# 역할과 재판 단계에 따른 프롬프트 생성
def build_prompt_for_role(role, phase, case_info):
    templates = {
        ("판사", "서론"): "재판 개시 및 절차 안내를 해 주세요.",
        ("검사", "서론"): "사건 개요 및 공소 사실을 진술하는 예시를 보여 주세요.",
        ("변호사", "서론"): "변론 요지와 무죄 주장을 간략하게 설명하는 예시를 보여 주세요.",
        ("판사", "증인 심문 시작"): "증인신문 절차와 발언 안내 예시를 보여 주세요.",
        ("검사", "증인 심문"): "증인에게 질문하는 예시를 보여 주세요.",
        ("변호사", "증인 심문"): "증인에게 반대신문하는 예시를 보여 주세요.",
        ("판사", "최종 의견 요청"): "최종 의견 요청 발언 예시를 보여 주세요.",
        ("검사", "최종 변론"): "최종 변론 요지 예시를 보여 주세요.",
        ("변호사", "최종 변론"): "최종 변론 요지 예시를 보여 주세요.",
        ("판사", "판결 선고"): "판결 선고문 예시를 보여 주세요.",
    }
    key = (role, phase)
    prompt = templates.get(key, "역할과 단계에 맞는 발언 예시를 작성해 주세요.")
    return f"사건 정보:\n{case_info}\n\n역할: {role}\n단계: {phase}\n\n{prompt}"

# 초기 시스템 메시지를 생성해 역할, 사건 정보, 발언 순서 등을 안내
def build_initial_prompt(case_name, current_phase, speak_order, user_role, case_facts, is_first_time=True):
    ai_roles = [role for role in speak_order if role != user_role]
    base_prompt = f"""
너는 '{case_name}' 사건의 법정 모의재판 시뮬레이터 AI야.
현재 재판 단계는 '{current_phase}'이고, 발언 순서는 {speak_order}야.
사용자는 '{user_role}' 역할을 맡고 있고, 너는 나머지 역할인 {ai_roles} 역할을 맡아야 해.

각 역할별 규칙:
- 판사: 절차 안내, 중재, 발언 유도
- 검사: 유죄 입증 (증거, 정황 중심)
- 변호사: 무죄 또는 감형 주장 (알리바이, 증거 불충분 등)

사건 정보:
{case_facts}

AI는 반드시 발언 순서에 따라 {ai_roles} 역할만 수행해야 해.
한 번에 하나의 역할만 말하도록 해.
이번에는 AI가 맡은 역할 중 한 명만 발언하세요. 다른 역할의 발언은 다음 사용자 입력 후 이어지면 됩니다.
답변 형식 예시는 다음과 같아:
{"".join([f"{r}: ...\n" for r in ai_roles])}
""".strip()

    # 사용자에게 예시 가이드를 제공할지 여부
    if is_first_time:
        base_prompt += "\n그리고 사용자에게는 다음 발언 예시를 간단히 한두 줄 정도로 제시해. 너무 지시하거나 명령조로 말하지 마."

    return base_prompt.strip()

# 사용자 역할에 맞는 질문 예시 3개 생성 (검사 또는 변호사용)
def generate_guide_questions(case_facts, user_role):
    ensure_client()
    if client is None:
        return "예시 질문 생성 실패 (Gemini 클라이언트 초기화 실패)"

    prompt = f"""
너는 모의재판 시뮬레이션에서 '{user_role}' 역할을 맡은 사용자에게 도움말을 제공해야 해.
다음 사건 정보 또는 법률 내용을 기반으로, '{user_role}'가 질문할 수 있는 구체적이고 사실 기반의 예시 질문 3가지를 만들어줘.
형법, 형사소송법 관련 사건이면 조문, 판례, 고의성, 책임 조각 사유 등을 반영해줘.

사건 정보:
{case_facts}

출력 형식:
- 예시 질문 1:
- 예시 질문 2:
- 예시 질문 3:
""".strip()

    try:
        response = client.send_message(prompt)
        return response.text.strip()
    except Exception as e:
        print("도움말 질문 생성 오류:", e)
        return "예시 질문 생성 실패 (AI 오류 발생)"

# 검사 또는 변호사 역할의 서론 발언문 생성
def generate_opening_statement(case_facts, user_role):
    if user_role not in ["검사", "변호사"]:
        return ""
    
    # 형법/형사소송법 예외 처리
    if case_facts in LAW_KNOWLEDGE:
        if user_role == "검사":
            return "검사: 피고인의 행위는 형법상 명백히 위법하며, 고의성이 입증된다고 판단됩니다."
        elif user_role == "변호사":
            return "변호사: 피고인의 행위는 정당방위 또는 과잉방위에 해당하여 책임을 묻기 어렵습니다."

    statement_type = "공소사실 진술" if user_role == "검사" else "변론 요지 진술"
    prompt = f"""
너는 '{user_role}' 역할로 '{statement_type}'을 작성해야 해.
다음 사건 정보를 바탕으로 '{user_role}'의 입장에서 간결한 서론 발언문을 작성해줘.
- 문장은 4~5문장 정도로 하고, 내용은 반드시 사실 기반이어야 해.
- 단정적인 말투를 사용해.
- '저는 검사입니다' 같은 소개는 하지 말고 바로 내용만 말해줘.

사건 정보:
{case_facts}

답변 형식 예시:
{user_role}: ...
""".strip()

    try:
        response = client.chat(
            model="gemini-1.5-pro",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("발언문 생성 오류:", e)
        return f"{user_role}: (발언문 생성 실패)"

# 사용자의 대화 입력을 기반으로 Gemini 모델 응답 생성
def generate_response(session_id, user_input):
    if session_id not in conversations:
        conversations[session_id] = []

    conversations[session_id].append(Content(role="user", parts=[Part(text=user_input)]))

    # system 메시지는 최초 1회만 삽입
    if not any(c.role == "system" for c in conversations[session_id]):
        system_prompt = (
            f"당신은 모의재판 시뮬레이터의 AI 판사, 검사, 변호사 역할을 맡고 있습니다.\n"
            f"다음은 참고해야 할 형법 및 형사소송법 조문입니다:\n{LAW_KNOWLEDGE}\n"
            f"현재까지의 대화 내용을 바탕으로 사용자에게 법적으로 타당한 답변을 제공하세요."
        )
        conversations[session_id].insert(0, Content(role="system", parts=[Part(text=system_prompt)]))

    response = genai.chats(model="gemini-1.5-pro", messages=conversations[session_id])
    reply_text = response.last.text

    conversations[session_id].append(Content(role="model", parts=[Part(text=reply_text)]))

    return reply_text

# 역할-단계별 예시 생성 (예: 검사의 증인신문 예시)
def generate_role_phase_example(case_name, role, phase):
    if case_name in LAW_KNOWLEDGE:
        case_facts = LAW_KNOWLEDGE[case_name]
    else:
        case = CASE_DATABASE.get(case_name)
        if not case:
            return f"'{case_name}' 사건 정보를 찾을 수 없습니다."
        case_facts = json.dumps(case, ensure_ascii=False, indent=2)

    prompt = build_prompt_for_role(role, phase, case_facts)
    try:
        response = client.generate_content(
            model="gemini-1.5-pro",
            contents=[Content(role="user", parts=[Part(text=prompt)])]
        )
        return response.text.strip()
    except Exception as e:
        print("역할-단계별 예시 생성 오류:", e)
        return "역할-단계별 예시 생성 실패 (AI 오류)"

def detect_phase_end(message):
    """현재 발언이 phase 종료를 암시하는지 간단히 분석 (예: '이상입니다', '질문 끝')"""
    triggers = ["이상입니다", "질문 끝", "여기까지입니다", "더 이상 없습니다"]
    return any(trigger in message for trigger in triggers)


def get_next_phase(current_phase):
    """현재 phase 다음 단계 반환"""
    phase_order = ["서론", "증거 제출", "증인 심문", "최종 변론", "판결"]
    try:
        index = phase_order.index(current_phase)
        return phase_order[index + 1] if index + 1 < len(phase_order) else None
    except ValueError:
        return None

# 재판 세션 시작 및 초기 프롬프트, 예시 제공
@app.route('/start-trial', methods=['POST'])
def start_trial():
    data = request.json
    session_id = data.get("session_id")
    user_role = data.get("role")
    case_name = data.get("caseName")
    current_phase = data.get("phase", "서론")

    # 사건 정보 가져오기
    case = CASE_DATABASE.get(case_name)
    if not case:
        return jsonify({"error": f"사건 '{case_name}'을 찾을 수 없습니다."}), 404

    case_facts = json.dumps(case, ensure_ascii=False, indent=2)

    # 발언 순서
    speak_order = PHASE_SPEAK_ORDER.get(current_phase, ["판사", "검사", "변호사"])

    # 초기 system prompt 생성
    initial_prompt = build_initial_prompt(case_name, current_phase, speak_order, user_role, case_facts)

    conversations[session_id] = [Content(role="system", parts=[Part(text=initial_prompt)])]

    # 발언 예시 + 질문 예시
    opening = generate_opening_statement(case_facts, user_role)
    guide_questions = generate_guide_questions(case_facts, user_role)

    return jsonify({
        "message": "재판 세션이 시작되었습니다.",
        "system_prompt": initial_prompt,
        "opening_statement": opening,
        "guide_questions": guide_questions
    })

@app.route('/ask-ai', methods=['POST'])
def ask_ai():
    try:
        data = request.get_json()
        session_id = data.get('sessionId')
        user_input = data.get('message')
        user_role = data.get('role')
        case_name = data.get('caseName')

        # 필수 값 확인
        if not all([session_id, user_input, user_role, case_name]):
            return jsonify({'error': '필수 파라미터 누락'}), 400

        # 사건 정보 확인
        case_data = CASE_DATABASE.get(case_name)
        if not case_data:
            return jsonify({'error': f"해당 사건 '{case_name}' 정보가 없습니다."}), 404

        case_facts = case_data.get("facts", "")
        if not case_facts:
            return jsonify({'error': f"'{case_name}'의 사건 요약 정보가 없습니다."}), 500

        # 대화 상태 초기화
        if session_id not in conversations:
            conversations[session_id] = []

        # 사용자 발언 저장
        conversations[session_id].append({
            "role": user_role,
            "content": user_input
        })

        # 프롬프트 구성
        history = conversations[session_id]
        messages = [{"role": "user" if m["role"] == user_role else "assistant", "content": m["content"]} for m in history]

        ensure_client()
        if client is None:
            return jsonify({'error': 'Gemini 클라이언트 초기화 실패'}), 500

        response = client.chat(
            model="gemini-1.5-pro",
            messages=messages
        )

        ai_reply = response.text.strip()
        conversations[session_id].append({
            "role": "AI",
            "content": ai_reply
        })
        print(jsonify({'response': ai_reply})) 
        return jsonify({'response': ai_reply})
   
    except Exception as e:
        print("AI 응답 오류:", e)
        traceback.print_exc()
        return jsonify({'error': 'AI 응답 생성 실패'}), 500
    
# 역할/단계 기반 예시 문장 요청
@app.route('/get-role-phase-example', methods=['POST'])
def get_role_phase_example():
    data = request.json
    role = data.get("role")
    phase = data.get("phase")
    case_name = data.get("caseName")

    if not role or not phase or not case_name:
        return jsonify({"error": "role, phase, caseName 필수"}), 400

    example_text = generate_role_phase_example(case_name, role, phase)

    return jsonify({
        "role": role,
        "phase": phase,
        "example": example_text
    })

# 현재 로딩된 사건 목록 출력 (디버깅용)
@app.route('/list-cases', methods=['GET'])
def list_cases():
    case_names = list(CASE_DATABASE.keys())
    return jsonify({
        "count": len(case_names),
        "cases": case_names
    })

# 서버 실행
if __name__ == '__main__':
    load_cases_from_py()  # 서버 시작 시 사건 정보 로딩
    app.run(debug=True)
