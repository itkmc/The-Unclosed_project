def build_legal_reference_text(case_keyword, legal_data):
    def keyword_match(text):
        return case_keyword.lower() in text.lower() if text else False

    related_statutes = []
    for statute in legal_data.get("statutes", []):
        if keyword_match(statute.get("조문제목", "")) or any(keyword_match(h) for h in statute.get("항목", [])):
            first_항 = statute.get("항목", ["내용 없음"])[0]
            related_statutes.append(f"{statute['조문제목']}\n  - {first_항.strip()}")

    related_precedents = []
    for precedent in legal_data.get("precedents", []):
        if keyword_match(precedent.get("판시사항", "")) or keyword_match(precedent.get("판결요지", "")):
            related_precedents.append(f"{precedent['사건명']}\n  - {precedent['판결요지'].strip()}")

    # ✅ 기본값 제거하고 '없음' 표시
    if not related_statutes:
        related_statutes.append("관련 법률 조항이 없습니다.")
    if not related_precedents:
        related_precedents.append("관련 판례가 없습니다.")

    return f"""[법률 근거]
{chr(10).join(related_statutes)}

[판례 근거]
{chr(10).join(related_precedents)}"""

def build_case_summary(caseData):
    # caseData가 dict가 아니면 빈 문자열 반환
    if not isinstance(caseData, dict):
        return ""

    parts = []

    # 사건명
    if caseData.get("caseName"):
        parts.append(f"사건명: {caseData['caseName']}")

    # 기간
    period = caseData.get("period")
    if period and period.get("start") and period.get("end"):
        parts.append(f"기간: {period['start']}부터 {period['end']}까지")

    # 피해자 정보
    victim = caseData.get("victim")
    if victim:
        v_name = victim.get("name", "피해자")
        v_details = victim.get("details", "")
        parts.append(f"피해자: {v_name} - {v_details}")

    # 범죄 상세
    crime_details = caseData.get("crimeDetails")
    if crime_details:
        comms = crime_details.get("communications", {})
        phone_calls = comms.get("phoneCalls", "")
        notes = comms.get("notes", "")
        parts.append(f"범죄 상세: {phone_calls} / {notes}")

        perp_traits = crime_details.get("perpetratorTraits")
        if perp_traits:
            parts.append(f"가해자 특징: {perp_traits}")

    # 조사 내용
    investigation = caseData.get("investigation")
    if investigation:
        composite_sketch = investigation.get("compositeSketch", "")
        evidence = investigation.get("evidenceUsed", [])
        evidence_str = ", ".join(evidence) if evidence else ""
        parts.append(f"조사 내용: 몽타주 - {composite_sketch}, 증거 - {evidence_str}")

    # 결과
    outcome = caseData.get("outcome")
    if outcome:
        status = outcome.get("status", "")
        description = outcome.get("description", "")
        parts.append(f"사건 결과: {status} - {description}")

    # 사회적 의의
    social_sig = caseData.get("socialSignificance")
    if social_sig:
        desc = social_sig.get("description", "")
        coverage = social_sig.get("modernCoverage", "")
        parts.append(f"사회적 의의: {desc}. 최근 보도: {coverage}")

    return "\n".join(parts)

def build_prompt_for_role(case_keyword, role, legal_data, user_question, caseData, phase=None):
    case_summary = build_case_summary(caseData)
    legal_ref_text = build_legal_reference_text(case_keyword, legal_data)

    prompt = f"""
당신은 법정에서 오직 '{role}' 역할만 수행합니다.  
다른 역할(판사, 검사, 변호사, 증인 중 하나라도)로 말하지 마세요.  
답변은 반드시 '{role}:' 으로 시작해야 하며, 다른 역할 발언을 포함하지 마십시오.

[사건 요약]
{case_summary or '요약 정보 없음'}

[법률 및 판례 근거]
{legal_ref_text}

[사용자 질문]
"{user_question}"
"""

    def actual_witness_exists(case):
        witnesses = case.get("witnesses", [])
        return bool(witnesses)

    if phase == "증인신문":
        if role in ["검사", "변호사"]:
            if not actual_witness_exists(caseData):
                prompt += """
※ 현재 이 사건에 실존하는 증인이 없습니다.  
따라서 가명 증인을 설정하고, 이름, 직업, 목격 내용, 증언의 신빙성 등을 포함하여 구체적인 증언을 해주시기 바랍니다.  
예: "가명 증인 홍길동, 택시기사, 사건 당일 피고인 목격" 등으로 진술하세요.
"""

        if role == "검사":
            prompt += """
검사가 증인 신문을 마친 후 즉시 '증인:' 역할로 전환하여, 가상의 증인이 검사에게 구체적이고 사실적인 증언을 해주시기 바랍니다.  
답변은 반드시 '증인:' 으로 시작해야 하며, 역할이 명확히 구분되어야 합니다.
"""

    prompt += f"""
{role}의 입장에서 논리적이고 법률적으로 답변하십시오.
"""
    return prompt

def infer_target_role_from_question(question: str) -> str:
    q = question.strip()
    if any(keyword in q for keyword in ["검사", "공소", "유죄", "입증", "신문", "증인"]):
        return "검사"
    if any(keyword in q for keyword in ["변호", "변호인", "무죄", "방어", "증거 부족"]):
        return "변호사"
    if any(keyword in q for keyword in ["판사", "재판부", "진행", "시작", "심리"]):
        return "판사"
    return None

def format_statutes_for_prompt(statutes=None):
    if statutes is None or len(statutes) == 0:
        return "관련 법률 조문 정보가 없습니다."
    
    lines = []
    # 조문마다 "조문번호: 내용" 형식으로 변환
    for statute in statutes[:3]:  # 최대 5개만 출력
        num = statute.get("조문번호", "번호없음")
        content = statute.get("내용", "내용없음")
        lines.append(f"{num}: {content}")
    return "\n".join(lines)

def format_precedents_for_prompt(precedents=None):
    if precedents is None or len(precedents) == 0:
        return "관련 판례 정보가 없습니다."
    
    lines = []
    for precedent in precedents[:3]:  # 최대 3개만 출력
        title = precedent.get("사건명", "제목없음")
        summary = precedent.get("요지", "요지없음")
        lines.append(f"{title}: {summary}")
    return "\n".join(lines)

def determine_speaker_for_phase(user_role: str, phase: str, strict: bool = True) -> str:
    """
    재판 단계에 따라 누가 발언해야 할지를 결정합니다.
    
    strict=True: 고정된 역할 흐름 (교과서적 재판 흐름)
    strict=False: 사용자 중심 유연 흐름
    """

    if strict:
        # ✅ 고정 재판 흐름
        if phase == "서론":
            return "판사"
        elif phase == "공소사실진술":
            return "검사"
        elif phase == "변론요지진술":
            return "변호사"
        elif phase == "증인신문":
            return "검사"
        elif phase == "반대신문":
            return "변호사"
        elif phase == "최종변론":
            return "검사"  # 또는 마지막 발언자 기준으로 판단 가능
        elif phase == "판결":
            return "판사"
        else:
            return user_role  # fallback
    else:
        # ✅ 유연 흐름: 사용자의 현재 역할 유지
        return user_role